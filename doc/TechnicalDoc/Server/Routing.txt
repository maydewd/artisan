** Routing and Middleware **

When requests first come in to the NodeJS server, they first go through a set of middleware. These actions are defined in /server/app/config/express.js and include things like parsing message bodies or inserting compression. These steps are executed for every request.

From there, the request gets routed according to the paths in /server/app/config/routes.js. If the request path matches one of the defined paths, the request gets routed to the specified controller. If none of the routes match, a 404 error is returned (declared at the bottom of the routes file). The other major component here is that each route has authentication associated with it (see the 'jwtAuth' variable). For routes that should only be accessible when logged in, the jwtAuth middleware should be added to that route. For routes like 'login', you don't want any sort of authentication middleware. jwtAuth first runs the request through the passport middleware, which is responsible for authenticating a user using a predefined set of 'strategies' (in our case it is either JWT or facebook-token). These strategies are defined in /server/app/config/passport.js. It is very important that authentication is added to any login-sensitive routes.

The one other significant piece of middleware to be aware of is the `multer` middleware. It can be seen on routes for making posts or registering a profile. The multer middleware manages the upload of files (in our case, images) through form-data posts. It saves these uploaded files to a specified location (the /public/ folder) and puts the filepath in the request for later use.
